// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../..
// from ../../gir-files
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(clippy::approx_constant, clippy::type_complexity, clippy::unreadable_literal, clippy::upper_case_acronyms)]
#![cfg_attr(docsrs, feature(doc_cfg))]

use glib_sys as glib;
use gobject_sys as gobject;

#[allow(unused_imports)]
use std::ffi::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong, c_void};
#[allow(unused_imports)]
use libc::{size_t, ssize_t, time_t, off_t, intptr_t, uintptr_t, FILE};
#[cfg(unix)]
#[allow(unused_imports)]
use libc::{dev_t, gid_t, pid_t, socklen_t, uid_t};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

// Enums
pub type BablIccIntent = c_int;
pub const BABL_ICC_INTENT_PERCEPTUAL: BablIccIntent = 0;
pub const BABL_ICC_INTENT_RELATIVE_COLORIMETRIC: BablIccIntent = 1;
pub const BABL_ICC_INTENT_SATURATION: BablIccIntent = 2;
pub const BABL_ICC_INTENT_ABSOLUTE_COLORIMETRIC: BablIccIntent = 3;
pub const BABL_ICC_INTENT_PERFORMANCE: BablIccIntent = 32;

pub type BablSpaceFlags = c_int;
pub const BABL_SPACE_FLAG_NONE: BablSpaceFlags = 0;
pub const BABL_SPACE_FLAG_EQUALIZE: BablSpaceFlags = 1;

// Constants
pub const BABL_ALPHA_FLOOR: c_int = 0;
pub const BABL_ALPHA_FLOOR_F: c_int = 0;
pub const BABL_MAJOR_VERSION: c_int = 0;
pub const BABL_MICRO_VERSION: c_int = 92;
pub const BABL_MINOR_VERSION: c_int = 1;

// Flags
pub type BablModelFlag = c_uint;
pub const BABL_MODEL_FLAG_ALPHA: BablModelFlag = 2;
pub const BABL_MODEL_FLAG_ASSOCIATED: BablModelFlag = 4;
pub const BABL_MODEL_FLAG_INVERTED: BablModelFlag = 8;
pub const BABL_MODEL_FLAG_LINEAR: BablModelFlag = 1024;
pub const BABL_MODEL_FLAG_NONLINEAR: BablModelFlag = 2048;
pub const BABL_MODEL_FLAG_PERCEPTUAL: BablModelFlag = 4096;
pub const BABL_MODEL_FLAG_GRAY: BablModelFlag = 1048576;
pub const BABL_MODEL_FLAG_RGB: BablModelFlag = 2097152;
pub const BABL_MODEL_FLAG_CIE: BablModelFlag = 8388608;
pub const BABL_MODEL_FLAG_CMYK: BablModelFlag = 16777216;

// Unions
#[repr(C)]
#[allow(dead_code)]
pub struct Babl {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for Babl {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("Babl @ {self:p}"))
         .finish()
    }
}

// Callbacks
pub type BablFishProcess = Option<unsafe extern "C" fn(*const Babl, *const c_char, *mut c_char, c_long, *mut c_void)>;
pub type BablFuncLinear = Option<unsafe extern "C" fn(*const Babl, *const c_char, *mut c_char, c_long, *mut c_void)>;
pub type BablFuncPlanar = Option<unsafe extern "C" fn(*const Babl, c_int, *mut *const c_char, *mut c_int, c_int, *mut *mut c_char, *mut c_int, c_long, *mut c_void)>;

extern "C" {

    //=========================================================================
    // Other functions
    //=========================================================================
    pub fn babl_component(name: *const c_char) -> *const Babl;
    pub fn babl_component_new(first_arg: *mut c_void, ...) -> *const Babl;
    pub fn babl_conversion_get_destination_space(conversion: *const Babl) -> *const Babl;
    pub fn babl_conversion_get_source_space(conversion: *const Babl) -> *const Babl;
    pub fn babl_conversion_new(first_arg: *mut c_void, ...) -> *const Babl;
    pub fn babl_exit();
    pub fn babl_fast_fish(source_format: *mut c_void, destination_format: *mut c_void, performance: *const c_char) -> *const Babl;
    pub fn babl_fish(source_format: *mut c_void, destination_format: *mut c_void) -> *const Babl;
    pub fn babl_fish_get_process(babl: *const Babl) -> BablFishProcess;
    pub fn babl_format(encoding: *const c_char) -> *const Babl;
    pub fn babl_format_exists(name: *const c_char) -> c_int;
    pub fn babl_format_get_bytes_per_pixel(format: *const Babl) -> c_int;
    pub fn babl_format_get_encoding(babl: *const Babl) -> *const c_char;
    pub fn babl_format_get_model(format: *const Babl) -> *const Babl;
    pub fn babl_format_get_n_components(format: *const Babl) -> c_int;
    pub fn babl_format_get_space(format: *const Babl) -> *const Babl;
    pub fn babl_format_get_type(format: *const Babl, component_index: c_int) -> *const Babl;
    pub fn babl_format_has_alpha(format: *const Babl) -> c_int;
    pub fn babl_format_is_format_n(format: *const Babl) -> c_int;
    pub fn babl_format_is_palette(format: *const Babl) -> c_int;
    pub fn babl_format_n(type_: *const Babl, components: c_int) -> *const Babl;
    pub fn babl_format_new(first_arg: *mut c_void, ...) -> *const Babl;
    pub fn babl_format_with_space(encoding: *const c_char, space: *const Babl) -> *const Babl;
    pub fn babl_get_model_flags(model: *const Babl) -> BablModelFlag;
    pub fn babl_get_name(babl: *const Babl) -> *const c_char;
    pub fn babl_get_user_data(babl: *const Babl) -> *mut c_void;
    pub fn babl_get_version(major: *mut c_int, minor: *mut c_int, micro: *mut c_int);
    pub fn babl_icc_get_key(icc_data: *const c_char, icc_length: c_int, key: *const c_char, language: *const c_char, country: *const c_char) -> *mut c_char;
    pub fn babl_icc_make_space(icc_data: *const c_char, icc_length: c_int, intent: BablIccIntent, error: *mut *const c_char) -> *const Babl;
    pub fn babl_init();
    pub fn babl_introspect(babl: *mut Babl);
    pub fn babl_model(name: *const c_char) -> *const Babl;
    pub fn babl_model_is(babl: *const Babl, model_name: *const c_char) -> c_int;
    pub fn babl_model_new(first_arg: *mut c_void, ...) -> *const Babl;
    pub fn babl_model_with_space(name: *const c_char, space: *const Babl) -> *const Babl;
    pub fn babl_new_palette(name: *const c_char, format_u8: *mut *const Babl, format_u8_with_alpha: *mut *const Babl) -> *const Babl;
    pub fn babl_new_palette_with_space(name: *const c_char, space: *const Babl, format_u8: *mut *const Babl, format_u8_with_alpha: *mut *const Babl) -> *const Babl;
    pub fn babl_palette_reset(babl: *const Babl);
    pub fn babl_palette_set_palette(babl: *const Babl, format: *const Babl, data: *mut u8, count: c_int);
    pub fn babl_process(babl_fish: *const Babl, source: *mut c_void, destination: *mut c_void, n: c_long) -> c_long;
    pub fn babl_process_rows(babl_fish: *const Babl, source: *mut c_void, source_stride: c_int, dest: *mut c_void, dest_stride: c_int, n: c_long, rows: c_int) -> c_long;
    pub fn babl_sampling(horizontal: c_int, vertical: c_int) -> *const Babl;
    pub fn babl_set_user_data(babl: *const Babl, data: *mut c_void);
    pub fn babl_space(name: *const c_char) -> *const Babl;
    pub fn babl_space_from_chromaticities(name: *const c_char, wx: c_double, wy: c_double, rx: c_double, ry: c_double, gx: c_double, gy: c_double, bx: c_double, by: c_double, trc_red: *const Babl, trc_green: *const Babl, trc_blue: *const Babl, flags: BablSpaceFlags) -> *const Babl;
    pub fn babl_space_from_icc(icc_data: *const c_char, icc_length: c_int, intent: BablIccIntent, error: *mut *const c_char) -> *const Babl;
    pub fn babl_space_from_rgbxyz_matrix(name: *const c_char, wx: c_double, wy: c_double, wz: c_double, rx: c_double, gx: c_double, bx: c_double, ry: c_double, gy: c_double, by: c_double, rz: c_double, gz: c_double, bz: c_double, trc_red: *const Babl, trc_green: *const Babl, trc_blue: *const Babl) -> *const Babl;
    pub fn babl_space_get(space: *const Babl, xw: *mut c_double, yw: *mut c_double, xr: *mut c_double, yr: *mut c_double, xg: *mut c_double, yg: *mut c_double, xb: *mut c_double, yb: *mut c_double, red_trc: *mut *const Babl, green_trc: *mut *const Babl, blue_trc: *mut *const Babl);
    pub fn babl_space_get_gamma(space: *const Babl) -> c_double;
    pub fn babl_space_get_icc(babl: *const Babl, length: *mut c_int) -> *const c_char;
    pub fn babl_space_get_rgb_luminance(space: *const Babl, red_luminance: *mut c_double, green_luminance: *mut c_double, blue_luminance: *mut c_double);
    pub fn babl_space_is_cmyk(space: *const Babl) -> c_int;
    pub fn babl_space_is_gray(space: *const Babl) -> c_int;
    pub fn babl_space_with_trc(space: *const Babl, trc: *const Babl) -> *const Babl;
    pub fn babl_trc(name: *const c_char) -> *const Babl;
    pub fn babl_trc_gamma(gamma: c_double) -> *const Babl;
    pub fn babl_type(name: *const c_char) -> *const Babl;
    pub fn babl_type_new(first_arg: *mut c_void, ...) -> *const Babl;

}
